name: ChopNow CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [web, admin, api, recommendation, blockchain]
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        if: matrix.service != 'recommendation'
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service == 'blockchain' && './packages/blockchain/package-lock.json' || format('./apps/{0}/package-lock.json', matrix.service) }}
      
      - name: Set up Python
        if: matrix.service == 'recommendation'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: './apps/recommendation/requirements.txt'
      
      - name: Install dependencies (Node.js)
        if: matrix.service != 'recommendation'
        run: |
          cd ${{ matrix.service == 'blockchain' && './packages/blockchain' || format('./apps/{0}', matrix.service) }}
          npm ci
      
      - name: Install dependencies (Python)
        if: matrix.service == 'recommendation'
        run: |
          cd ./apps/recommendation
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests (Node.js)
        if: matrix.service != 'recommendation'
        run: |
          cd ${{ matrix.service == 'blockchain' && './packages/blockchain' || format('./apps/{0}', matrix.service) }}
          npm test
      
      - name: Run tests (Python)
        if: matrix.service == 'recommendation'
        run: |
          cd ./apps/recommendation
          pytest --cov=src

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [web, admin, api, recommendation, blockchain]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.service == 'blockchain' && './packages/blockchain' || format('./apps/{0}', matrix.service) }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: chopnow/${{ matrix.service }}:latest,chopnow/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=chopnow/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=chopnow/${{ matrix.service }}:buildcache,mode=max

  deploy:
    name: Deploy
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
      
      - name: Deploy to production
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd /opt/chopnow && \
          docker-compose pull && \
          docker-compose up -d && \
          docker system prune -af"
